"use strict"; function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _sucrase = require('sucrase');

const PluginError = require("plugin-error");
const replaceExt = require("replace-ext");
const through = require("through2");

const PLUGIN_NAME = "@sucrase/gulp-plugin";

function gulpSucrase(options) {
  return through.obj(function(
    
    // tslint:disable-next-line no-any
    file,
    enc,
    // tslint:disable-next-line no-any
    cb,
  ) {
    if (file.isNull()) {
      cb(null, file);
      return;
    }
    if (file.isStream()) {
      cb(new PluginError(PLUGIN_NAME, "Streaming is not supported."));
      return;
    }

    try {
      const resultCode = (0, _sucrase.transform)(file.contents.toString(), {filePath: file.path, ...options})
        .code;
      file.contents = Buffer.from(resultCode);
      file.path = replaceExt(file.path, ".js");
      this.push(file);
    } catch (e) {
      e.message = `Error when processing file ${file.path}: ${e.message}`;
      this.emit("error", new PluginError(PLUGIN_NAME, e));
    }

    cb();
  });
}

module.exports = gulpSucrase;
