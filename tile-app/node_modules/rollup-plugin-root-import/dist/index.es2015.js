var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var fs = require('fs');
var path = require('path');

/**
 * Check whether the given value is a string.
 *
 * @param {*} value
 * @return {boolean} Whether value is a string.
 */
var isString = function isString(value) {
  return typeof value === 'string';
};

/**
 * Coerce the input to an array of strings. If the input is a string, wrap it in
 * an array. If the input is a string, filter out all the non-string elements.
 * If we end up with an empty array, return null.
 *
 * @param {*} array
 * @return {?Array<String>} The output array.
 */
function strArray(array) {
  if (Array.isArray(array)) {
    array = array.filter(isString);
    return array.length ? array : null;
  }
  return isString(array) ? [array] : null;
}

/**
 * Call the evaluate function asynchronously on each item in the items array,
 * and return a promise that will fail on the first error evaluate produces, or
 * resolve to the first truthy value which evaluate produces. If all items
 * evaluate to falsy values, and evaluate never produces an error, the promise
 * will resolve to null.
 *
 * @param {Array<*>} items An array of opaque items.
 * @param {Function(*, Function(?Error=, *=))} evaluate
 * @return {Promise<*>}
 */
function firstOf(items, evaluate) {
  return new Promise(function (accept, reject) {
    (function next(i) {
      if (i >= items.length) {
        accept(null);
        return;
      }

      setImmediate(function () {
        return evaluate(items[i], function (err, value) {
          if (err) reject(err);else if (value) accept(value);else next(i + 1);
        });
      });
    })(0);
  });
}

/**
 * Asynchronously resolve a module to an absolute path given a set of places to
 * look.
 *
 * @param {String} importee The id of the module, relative to one of the
 *   specified imports.
 * @param {Array<Import>} imports The import objects.
 * @return {Promise<?String>} The resolved module.
 */
function resolve(importee, imports) {
  return firstOf(imports, function (_ref, done) {
    var root = _ref.root,
        extension = _ref.extension;

    var file = path.join(root, importee + extension);
    fs.stat(file, function (err, stats) {
      if (!err && stats.isFile()) done(null, file);else done(null, null);
    });
  });
}

var Import = function Import(root, extension) {
  classCallCheck(this, Import);

  this.root = root;
  this.extension = extension;
};

/**
 * Add the ability to import modules by the root path, like Meteor.
 *
 * @param {{
 *   useEntry: boolean=,
 *   root: string|Array<string>=,
 *   extensions: string|Array<string>=
 * }} options The options for this rollup plugin.
 * @return {Object} The rollup plugin.
 */


function rootImport(options) {
  var useEntry = false,
      extensions = null;
  var roots = strArray(options);
  if (!roots && options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
    roots = strArray(options.root);
    extensions = strArray(options.extensions);

    if (~['prepend', 'append'].indexOf(options.useEntry)) {
      useEntry = options.useEntry;
    }
  }

  if (!extensions) extensions = [''];else if (extensions.indexOf('') === -1) extensions.unshift('');

  // We can cache resolved modules when they're relative to the root. We use a
  // null-inherited to avoid needing to use hasOwnProperty.
  var cache = Object.create(null);

  var imports = [],
      hadNoRoots = !roots;
  return {
    options: function options(_ref2) {
      var entry = _ref2.entry;

      if (!roots) roots = [];

      // Ignore exotic entry types (arrays, objects) as may be handled by plugins
      // like https://github.com/rollup/rollup-plugin-multi-entry.
      if (typeof entry === 'string') {
        var entryRoot = path.dirname(entry);

        if (!roots.length) {
          roots.push(entryRoot);
        } else if (useEntry === 'prepend') {
          roots.unshift(entryRoot);
        } else if (useEntry === 'append') {
          roots.push(entryRoot);
        }
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = roots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var root = _step.value;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = extensions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var ext = _step2.value;

              imports.push(new Import(root, ext));
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    },
    resolveId: function resolveId(importee, importer) {
      // Don't try to resolve the entry unless we have explicit roots.
      if (!importer && hadNoRoots) return;

      if (importee[0] === '/') {
        // If we've cached this import, don't bother trawling the filesystem
        // again.
        var cached = cache[importee];
        if (cached) return cached;

        return resolve(importee, imports).then(function (resolved) {
          // Save this in the cache in case we see it again.
          cache[importee] = resolved;
          return resolved;
        });
      }
    }
  };
}

export default rootImport;