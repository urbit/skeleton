import { Options, SucraseContext, Transform } from "../index";
import { ClassInfo } from "../util/getClassInfo";
export default class RootTransformer {
    private transformers;
    private nameManager;
    private tokens;
    private generatedVariables;
    private isImportsTransformEnabled;
    constructor(sucraseContext: SucraseContext, transforms: Array<Transform>, enableLegacyBabel5ModuleInterop: boolean, options: Options);
    transform(): string;
    processBalancedCode(): void;
    processToken(): void;
    /**
     * Skip past a class with a name and return that name.
     */
    processNamedClass(): string;
    processClass(): void;
    /**
     * We want to just handle class fields in all contexts, since TypeScript supports them. Later,
     * when some JS implementations support class fields, this should be made optional.
     */
    processClassBody(classInfo: ClassInfo): void;
    processPossibleTypeRange(): boolean;
}
